// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { BriefingServiceListBriefingTypesData, BriefingServiceListBriefingTypesResponse, BriefingServiceListBriefingTypesError, BriefingServiceCreateBriefingTypeData, BriefingServiceCreateBriefingTypeResponse, BriefingServiceCreateBriefingTypeError, BriefingServiceUpdateBriefingTypeData, BriefingServiceUpdateBriefingTypeResponse, BriefingServiceUpdateBriefingTypeError, BriefingServiceDeleteBriefingTypeData, BriefingServiceDeleteBriefingTypeError, BriefingServiceGetBriefingTypeData, BriefingServiceGetBriefingTypeResponse, BriefingServiceGetBriefingTypeError, BriefingServiceListBriefingsData, BriefingServiceListBriefingsResponse, BriefingServiceListBriefingsError, BriefingServiceCreateBriefingData, BriefingServiceCreateBriefingResponse, BriefingServiceCreateBriefingError, BriefingServiceUpdateBriefingData, BriefingServiceUpdateBriefingResponse, BriefingServiceUpdateBriefingError, BriefingServiceDeleteBriefingData, BriefingServiceDeleteBriefingError, BriefingServiceGetBriefingData, BriefingServiceGetBriefingResponse, BriefingServiceGetBriefingError, CardServiceListCardsData, CardServiceListCardsResponse, CardServiceListCardsError, CardServiceCreateCardData, CardServiceCreateCardResponse, CardServiceCreateCardError, CardServiceUpdateCardData, CardServiceUpdateCardResponse, CardServiceUpdateCardError, CardServiceDeleteCardData, CardServiceDeleteCardError, CardServiceGetCardData, CardServiceGetCardResponse, CardServiceGetCardError, MemberServiceListMembersData, MemberServiceListMembersResponse, MemberServiceListMembersError, MemberServiceCreateMemberData, MemberServiceCreateMemberResponse, MemberServiceCreateMemberError, MemberServiceDeleteMemberData, MemberServiceDeleteMemberError, MemberServiceGetMemberData, MemberServiceGetMemberResponse, MemberServiceGetMemberError, MemberServiceUpdateMemberData, MemberServiceUpdateMemberResponse, MemberServiceUpdateMemberError, PresenceServiceListPresencesData, PresenceServiceListPresencesResponse, PresenceServiceListPresencesError, PresenceServiceDeletePresenceData, PresenceServiceDeletePresenceError, PresenceServiceUpdatePresenceData, PresenceServiceUpdatePresenceResponse, PresenceServiceUpdatePresenceError, PresenceServiceCheckinData, PresenceServiceCheckinResponse, PresenceServiceCheckinError, PresenceServiceCheckoutData, PresenceServiceCheckoutResponse, PresenceServiceCheckoutError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List briefing types
 * List all registered briefing types
 */
export const briefingServiceListBriefingTypes = <ThrowOnError extends boolean = false>(options?: Options<BriefingServiceListBriefingTypesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BriefingServiceListBriefingTypesResponse, BriefingServiceListBriefingTypesError, ThrowOnError>({
        url: '/v1/briefing-types',
        ...options
    });
};

/**
 * Create briefing type
 * Create safety briefing type
 */
export const briefingServiceCreateBriefingType = <ThrowOnError extends boolean = false>(options: Options<BriefingServiceCreateBriefingTypeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BriefingServiceCreateBriefingTypeResponse, BriefingServiceCreateBriefingTypeError, ThrowOnError>({
        url: '/v1/briefing-types',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update briefing type
 * Update specified fields of briefing types
 */
export const briefingServiceUpdateBriefingType = <ThrowOnError extends boolean = false>(options: Options<BriefingServiceUpdateBriefingTypeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<BriefingServiceUpdateBriefingTypeResponse, BriefingServiceUpdateBriefingTypeError, ThrowOnError>({
        url: '/v1/briefing-types/{briefing_type.id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete briefing-type
 * Delete the specified briefing type
 */
export const briefingServiceDeleteBriefingType = <ThrowOnError extends boolean = false>(options: Options<BriefingServiceDeleteBriefingTypeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, BriefingServiceDeleteBriefingTypeError, ThrowOnError>({
        url: '/v1/briefing-types/{id}',
        ...options
    });
};

/**
 * Get briefing-type
 * Get briefing type information
 */
export const briefingServiceGetBriefingType = <ThrowOnError extends boolean = false>(options: Options<BriefingServiceGetBriefingTypeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BriefingServiceGetBriefingTypeResponse, BriefingServiceGetBriefingTypeError, ThrowOnError>({
        url: '/v1/briefing-types/{id}',
        ...options
    });
};

/**
 * List briefings
 * List all registered briefings
 */
export const briefingServiceListBriefings = <ThrowOnError extends boolean = false>(options?: Options<BriefingServiceListBriefingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BriefingServiceListBriefingsResponse, BriefingServiceListBriefingsError, ThrowOnError>({
        url: '/v1/briefings',
        ...options
    });
};

/**
 * Create Briefing
 * Create safety briefing
 */
export const briefingServiceCreateBriefing = <ThrowOnError extends boolean = false>(options: Options<BriefingServiceCreateBriefingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BriefingServiceCreateBriefingResponse, BriefingServiceCreateBriefingError, ThrowOnError>({
        url: '/v1/briefings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update briefing
 * Update specified fields of briefings
 */
export const briefingServiceUpdateBriefing = <ThrowOnError extends boolean = false>(options: Options<BriefingServiceUpdateBriefingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<BriefingServiceUpdateBriefingResponse, BriefingServiceUpdateBriefingError, ThrowOnError>({
        url: '/v1/briefings/{briefing.id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete briefing
 * Delete the specified briefing
 */
export const briefingServiceDeleteBriefing = <ThrowOnError extends boolean = false>(options: Options<BriefingServiceDeleteBriefingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, BriefingServiceDeleteBriefingError, ThrowOnError>({
        url: '/v1/briefings/{id}',
        ...options
    });
};

/**
 * Get briefing
 * Get briefing information
 */
export const briefingServiceGetBriefing = <ThrowOnError extends boolean = false>(options: Options<BriefingServiceGetBriefingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BriefingServiceGetBriefingResponse, BriefingServiceGetBriefingError, ThrowOnError>({
        url: '/v1/briefings/{id}',
        ...options
    });
};

/**
 * List cards
 * List all registered cards
 */
export const cardServiceListCards = <ThrowOnError extends boolean = false>(options?: Options<CardServiceListCardsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CardServiceListCardsResponse, CardServiceListCardsError, ThrowOnError>({
        url: '/v1/cards',
        ...options
    });
};

/**
 * Create Card
 * Create Space Card
 */
export const cardServiceCreateCard = <ThrowOnError extends boolean = false>(options: Options<CardServiceCreateCardData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CardServiceCreateCardResponse, CardServiceCreateCardError, ThrowOnError>({
        url: '/v1/cards',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update card
 * Update specified fields of cards
 */
export const cardServiceUpdateCard = <ThrowOnError extends boolean = false>(options: Options<CardServiceUpdateCardData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CardServiceUpdateCardResponse, CardServiceUpdateCardError, ThrowOnError>({
        url: '/v1/cards/{card.id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete card
 * Delete the specified card
 */
export const cardServiceDeleteCard = <ThrowOnError extends boolean = false>(options: Options<CardServiceDeleteCardData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, CardServiceDeleteCardError, ThrowOnError>({
        url: '/v1/cards/{id}',
        ...options
    });
};

/**
 * Get card
 * Get card information
 */
export const cardServiceGetCard = <ThrowOnError extends boolean = false>(options: Options<CardServiceGetCardData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CardServiceGetCardResponse, CardServiceGetCardError, ThrowOnError>({
        url: '/v1/cards/{id}',
        ...options
    });
};

/**
 * List members
 * List all registered members
 */
export const memberServiceListMembers = <ThrowOnError extends boolean = false>(options?: Options<MemberServiceListMembersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MemberServiceListMembersResponse, MemberServiceListMembersError, ThrowOnError>({
        url: '/v1/members',
        ...options
    });
};

/**
 * Create Member
 * Create Space Member
 */
export const memberServiceCreateMember = <ThrowOnError extends boolean = false>(options: Options<MemberServiceCreateMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MemberServiceCreateMemberResponse, MemberServiceCreateMemberError, ThrowOnError>({
        url: '/v1/members',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete member
 * Delete the specified member
 */
export const memberServiceDeleteMember = <ThrowOnError extends boolean = false>(options: Options<MemberServiceDeleteMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, MemberServiceDeleteMemberError, ThrowOnError>({
        url: '/v1/members/{id}',
        ...options
    });
};

/**
 * Get member
 * Get member information
 */
export const memberServiceGetMember = <ThrowOnError extends boolean = false>(options: Options<MemberServiceGetMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MemberServiceGetMemberResponse, MemberServiceGetMemberError, ThrowOnError>({
        url: '/v1/members/{id}',
        ...options
    });
};

/**
 * Update member
 * Update specified fields of members
 */
export const memberServiceUpdateMember = <ThrowOnError extends boolean = false>(options: Options<MemberServiceUpdateMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MemberServiceUpdateMemberResponse, MemberServiceUpdateMemberError, ThrowOnError>({
        url: '/v1/members/{member.id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List presences
 * List precenses, where members have checked in/out
 */
export const presenceServiceListPresences = <ThrowOnError extends boolean = false>(options?: Options<PresenceServiceListPresencesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PresenceServiceListPresencesResponse, PresenceServiceListPresencesError, ThrowOnError>({
        url: '/v1/presences',
        ...options
    });
};

/**
 * Delete Presence
 * Delete a presence record
 */
export const presenceServiceDeletePresence = <ThrowOnError extends boolean = false>(options: Options<PresenceServiceDeletePresenceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, PresenceServiceDeletePresenceError, ThrowOnError>({
        url: '/v1/presences/{id}',
        ...options
    });
};

/**
 * Update presence
 * Updates a presence. Usual operation should be via checkin/checkout instead of update
 */
export const presenceServiceUpdatePresence = <ThrowOnError extends boolean = false>(options: Options<PresenceServiceUpdatePresenceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PresenceServiceUpdatePresenceResponse, PresenceServiceUpdatePresenceError, ThrowOnError>({
        url: '/v1/presences/{presence.id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Check in
 * Check in a member, this creates a new presence
 */
export const presenceServiceCheckin = <ThrowOnError extends boolean = false>(options: Options<PresenceServiceCheckinData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PresenceServiceCheckinResponse, PresenceServiceCheckinError, ThrowOnError>({
        url: '/v1/presences:checkin',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Check out
 * Check out a member, ends an open presence if there is one
 */
export const presenceServiceCheckout = <ThrowOnError extends boolean = false>(options: Options<PresenceServiceCheckoutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PresenceServiceCheckoutResponse, PresenceServiceCheckoutError, ThrowOnError>({
        url: '/v1/presences:checkout',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};