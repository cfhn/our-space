// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMemberRequestMultiError, or nil if none found.
func (m *CreateMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MemberId

	if all {
		switch v := interface{}(m.GetMember()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMemberRequestValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMemberRequestValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMember()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMemberRequestValidationError{
				field:  "Member",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMemberRequestMultiError(errors)
	}

	return nil
}

// CreateMemberRequestMultiError is an error wrapping multiple validation
// errors returned by CreateMemberRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMemberRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMemberRequestMultiError) AllErrors() []error { return m }

// CreateMemberRequestValidationError is the validation error returned by
// CreateMemberRequest.Validate if the designated constraints aren't met.
type CreateMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMemberRequestValidationError) ErrorName() string {
	return "CreateMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMemberRequestValidationError{}

// Validate checks the field values on Member with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Member) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Member with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MemberMultiError, or nil if none found.
func (m *Member) ValidateAll() error {
	return m.validate(true)
}

func (m *Member) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetMembershipStart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberValidationError{
					field:  "MembershipStart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberValidationError{
					field:  "MembershipStart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMembershipStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberValidationError{
				field:  "MembershipStart",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMembershipEnd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberValidationError{
					field:  "MembershipEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberValidationError{
					field:  "MembershipEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMembershipEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberValidationError{
				field:  "MembershipEnd",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AgeCategory

	if len(errors) > 0 {
		return MemberMultiError(errors)
	}

	return nil
}

// MemberMultiError is an error wrapping multiple validation errors returned by
// Member.ValidateAll() if the designated constraints aren't met.
type MemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberMultiError) AllErrors() []error { return m }

// MemberValidationError is the validation error returned by Member.Validate if
// the designated constraints aren't met.
type MemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberValidationError) ErrorName() string { return "MemberValidationError" }

// Error satisfies the builtin error interface
func (e MemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberValidationError{}

// Validate checks the field values on GetMemberRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMemberRequestMultiError, or nil if none found.
func (m *GetMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetMemberRequestMultiError(errors)
	}

	return nil
}

// GetMemberRequestMultiError is an error wrapping multiple validation errors
// returned by GetMemberRequest.ValidateAll() if the designated constraints
// aren't met.
type GetMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMemberRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMemberRequestMultiError) AllErrors() []error { return m }

// GetMemberRequestValidationError is the validation error returned by
// GetMemberRequest.Validate if the designated constraints aren't met.
type GetMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMemberRequestValidationError) ErrorName() string { return "GetMemberRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMemberRequestValidationError{}

// Validate checks the field values on ListMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMembersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMembersRequestMultiError, or nil if none found.
func (m *ListMembersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMembersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageToken

	// no validation rules for SortBy

	// no validation rules for SortDirection

	if m.NameContains != nil {
		// no validation rules for NameContains
	}

	if m.MembershipStartAfter != nil {

		if all {
			switch v := interface{}(m.GetMembershipStartAfter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMembersRequestValidationError{
						field:  "MembershipStartAfter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMembersRequestValidationError{
						field:  "MembershipStartAfter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMembershipStartAfter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMembersRequestValidationError{
					field:  "MembershipStartAfter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.MembershipStartBefore != nil {

		if all {
			switch v := interface{}(m.GetMembershipStartBefore()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMembersRequestValidationError{
						field:  "MembershipStartBefore",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMembersRequestValidationError{
						field:  "MembershipStartBefore",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMembershipStartBefore()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMembersRequestValidationError{
					field:  "MembershipStartBefore",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.MembershipEndAfter != nil {

		if all {
			switch v := interface{}(m.GetMembershipEndAfter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMembersRequestValidationError{
						field:  "MembershipEndAfter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMembersRequestValidationError{
						field:  "MembershipEndAfter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMembershipEndAfter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMembersRequestValidationError{
					field:  "MembershipEndAfter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.MembershipEndBefore != nil {

		if all {
			switch v := interface{}(m.GetMembershipEndBefore()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMembersRequestValidationError{
						field:  "MembershipEndBefore",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMembersRequestValidationError{
						field:  "MembershipEndBefore",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMembershipEndBefore()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMembersRequestValidationError{
					field:  "MembershipEndBefore",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.AgeCategoryEquals != nil {
		// no validation rules for AgeCategoryEquals
	}

	if len(errors) > 0 {
		return ListMembersRequestMultiError(errors)
	}

	return nil
}

// ListMembersRequestMultiError is an error wrapping multiple validation errors
// returned by ListMembersRequest.ValidateAll() if the designated constraints
// aren't met.
type ListMembersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMembersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMembersRequestMultiError) AllErrors() []error { return m }

// ListMembersRequestValidationError is the validation error returned by
// ListMembersRequest.Validate if the designated constraints aren't met.
type ListMembersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMembersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMembersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMembersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMembersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMembersRequestValidationError) ErrorName() string {
	return "ListMembersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMembersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMembersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMembersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMembersRequestValidationError{}

// Validate checks the field values on ListMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMembersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMembersResponseMultiError, or nil if none found.
func (m *ListMembersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMembersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMembersResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMembersResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMembersResponseValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListMembersResponseMultiError(errors)
	}

	return nil
}

// ListMembersResponseMultiError is an error wrapping multiple validation
// errors returned by ListMembersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListMembersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMembersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMembersResponseMultiError) AllErrors() []error { return m }

// ListMembersResponseValidationError is the validation error returned by
// ListMembersResponse.Validate if the designated constraints aren't met.
type ListMembersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMembersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMembersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMembersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMembersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMembersResponseValidationError) ErrorName() string {
	return "ListMembersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMembersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMembersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMembersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMembersResponseValidationError{}

// Validate checks the field values on MemberPageToken with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MemberPageToken) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberPageToken with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberPageTokenMultiError, or nil if none found.
func (m *MemberPageToken) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberPageToken) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Field

	// no validation rules for LastValue

	// no validation rules for Direction

	// no validation rules for LastId

	if len(errors) > 0 {
		return MemberPageTokenMultiError(errors)
	}

	return nil
}

// MemberPageTokenMultiError is an error wrapping multiple validation errors
// returned by MemberPageToken.ValidateAll() if the designated constraints
// aren't met.
type MemberPageTokenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberPageTokenMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberPageTokenMultiError) AllErrors() []error { return m }

// MemberPageTokenValidationError is the validation error returned by
// MemberPageToken.Validate if the designated constraints aren't met.
type MemberPageTokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberPageTokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberPageTokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberPageTokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberPageTokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberPageTokenValidationError) ErrorName() string { return "MemberPageTokenValidationError" }

// Error satisfies the builtin error interface
func (e MemberPageTokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberPageToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberPageTokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberPageTokenValidationError{}

// Validate checks the field values on UpdateMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMemberRequestMultiError, or nil if none found.
func (m *UpdateMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMember()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMemberRequestValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMemberRequestValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMember()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMemberRequestValidationError{
				field:  "Member",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMemberRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMemberRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMemberRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateMemberRequestMultiError(errors)
	}

	return nil
}

// UpdateMemberRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateMemberRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMemberRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMemberRequestMultiError) AllErrors() []error { return m }

// UpdateMemberRequestValidationError is the validation error returned by
// UpdateMemberRequest.Validate if the designated constraints aren't met.
type UpdateMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMemberRequestValidationError) ErrorName() string {
	return "UpdateMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMemberRequestValidationError{}

// Validate checks the field values on DeleteMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMemberRequestMultiError, or nil if none found.
func (m *DeleteMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteMemberRequestMultiError(errors)
	}

	return nil
}

// DeleteMemberRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteMemberRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMemberRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMemberRequestMultiError) AllErrors() []error { return m }

// DeleteMemberRequestValidationError is the validation error returned by
// DeleteMemberRequest.Validate if the designated constraints aren't met.
type DeleteMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMemberRequestValidationError) ErrorName() string {
	return "DeleteMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMemberRequestValidationError{}

// Validate checks the field values on Card with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Card) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Card with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CardMultiError, or nil if none found.
func (m *Card) ValidateAll() error {
	return m.validate(true)
}

func (m *Card) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for MemberId

	// no validation rules for RfidValue

	if all {
		switch v := interface{}(m.GetValidFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CardValidationError{
					field:  "ValidFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CardValidationError{
					field:  "ValidFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValidFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CardValidationError{
				field:  "ValidFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetValidTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CardValidationError{
					field:  "ValidTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CardValidationError{
					field:  "ValidTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValidTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CardValidationError{
				field:  "ValidTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CardMultiError(errors)
	}

	return nil
}

// CardMultiError is an error wrapping multiple validation errors returned by
// Card.ValidateAll() if the designated constraints aren't met.
type CardMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CardMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CardMultiError) AllErrors() []error { return m }

// CardValidationError is the validation error returned by Card.Validate if the
// designated constraints aren't met.
type CardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CardValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CardValidationError) ErrorName() string { return "CardValidationError" }

// Error satisfies the builtin error interface
func (e CardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCard.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CardValidationError{}

// Validate checks the field values on CardPageToken with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CardPageToken) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CardPageToken with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CardPageTokenMultiError, or
// nil if none found.
func (m *CardPageToken) ValidateAll() error {
	return m.validate(true)
}

func (m *CardPageToken) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Field

	// no validation rules for LastValue

	// no validation rules for Direction

	// no validation rules for LastId

	if len(errors) > 0 {
		return CardPageTokenMultiError(errors)
	}

	return nil
}

// CardPageTokenMultiError is an error wrapping multiple validation errors
// returned by CardPageToken.ValidateAll() if the designated constraints
// aren't met.
type CardPageTokenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CardPageTokenMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CardPageTokenMultiError) AllErrors() []error { return m }

// CardPageTokenValidationError is the validation error returned by
// CardPageToken.Validate if the designated constraints aren't met.
type CardPageTokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CardPageTokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CardPageTokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CardPageTokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CardPageTokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CardPageTokenValidationError) ErrorName() string { return "CardPageTokenValidationError" }

// Error satisfies the builtin error interface
func (e CardPageTokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCardPageToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CardPageTokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CardPageTokenValidationError{}

// Validate checks the field values on CreateCardRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateCardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCardRequestMultiError, or nil if none found.
func (m *CreateCardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CardId

	if all {
		switch v := interface{}(m.GetCard()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCardRequestValidationError{
					field:  "Card",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCardRequestValidationError{
					field:  "Card",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCardRequestValidationError{
				field:  "Card",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCardRequestMultiError(errors)
	}

	return nil
}

// CreateCardRequestMultiError is an error wrapping multiple validation errors
// returned by CreateCardRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateCardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCardRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCardRequestMultiError) AllErrors() []error { return m }

// CreateCardRequestValidationError is the validation error returned by
// CreateCardRequest.Validate if the designated constraints aren't met.
type CreateCardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCardRequestValidationError) ErrorName() string {
	return "CreateCardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCardRequestValidationError{}

// Validate checks the field values on GetCardRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCardRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCardRequestMultiError,
// or nil if none found.
func (m *GetCardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCardRequestMultiError(errors)
	}

	return nil
}

// GetCardRequestMultiError is an error wrapping multiple validation errors
// returned by GetCardRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCardRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCardRequestMultiError) AllErrors() []error { return m }

// GetCardRequestValidationError is the validation error returned by
// GetCardRequest.Validate if the designated constraints aren't met.
type GetCardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCardRequestValidationError) ErrorName() string { return "GetCardRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetCardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCardRequestValidationError{}

// Validate checks the field values on ListCardsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListCardsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCardsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCardsRequestMultiError, or nil if none found.
func (m *ListCardsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCardsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageToken

	// no validation rules for SortBy

	// no validation rules for SortDirection

	// no validation rules for MemberId

	if all {
		switch v := interface{}(m.GetValidOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCardsRequestValidationError{
					field:  "ValidOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCardsRequestValidationError{
					field:  "ValidOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValidOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCardsRequestValidationError{
				field:  "ValidOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RfidValue

	if len(errors) > 0 {
		return ListCardsRequestMultiError(errors)
	}

	return nil
}

// ListCardsRequestMultiError is an error wrapping multiple validation errors
// returned by ListCardsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListCardsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCardsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCardsRequestMultiError) AllErrors() []error { return m }

// ListCardsRequestValidationError is the validation error returned by
// ListCardsRequest.Validate if the designated constraints aren't met.
type ListCardsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCardsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCardsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCardsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCardsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCardsRequestValidationError) ErrorName() string { return "ListCardsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListCardsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCardsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCardsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCardsRequestValidationError{}

// Validate checks the field values on ListCardsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListCardsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCardsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCardsResponseMultiError, or nil if none found.
func (m *ListCardsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCardsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCardsResponseValidationError{
						field:  fmt.Sprintf("Cards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCardsResponseValidationError{
						field:  fmt.Sprintf("Cards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCardsResponseValidationError{
					field:  fmt.Sprintf("Cards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListCardsResponseMultiError(errors)
	}

	return nil
}

// ListCardsResponseMultiError is an error wrapping multiple validation errors
// returned by ListCardsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListCardsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCardsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCardsResponseMultiError) AllErrors() []error { return m }

// ListCardsResponseValidationError is the validation error returned by
// ListCardsResponse.Validate if the designated constraints aren't met.
type ListCardsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCardsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCardsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCardsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCardsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCardsResponseValidationError) ErrorName() string {
	return "ListCardsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCardsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCardsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCardsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCardsResponseValidationError{}

// Validate checks the field values on UpdateCardRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateCardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCardRequestMultiError, or nil if none found.
func (m *UpdateCardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCard()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCardRequestValidationError{
					field:  "Card",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCardRequestValidationError{
					field:  "Card",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCardRequestValidationError{
				field:  "Card",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCardRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCardRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCardRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCardRequestMultiError(errors)
	}

	return nil
}

// UpdateCardRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateCardRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateCardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCardRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCardRequestMultiError) AllErrors() []error { return m }

// UpdateCardRequestValidationError is the validation error returned by
// UpdateCardRequest.Validate if the designated constraints aren't met.
type UpdateCardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCardRequestValidationError) ErrorName() string {
	return "UpdateCardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCardRequestValidationError{}

// Validate checks the field values on DeleteCardRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteCardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCardRequestMultiError, or nil if none found.
func (m *DeleteCardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteCardRequestMultiError(errors)
	}

	return nil
}

// DeleteCardRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteCardRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteCardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCardRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCardRequestMultiError) AllErrors() []error { return m }

// DeleteCardRequestValidationError is the validation error returned by
// DeleteCardRequest.Validate if the designated constraints aren't met.
type DeleteCardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCardRequestValidationError) ErrorName() string {
	return "DeleteCardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCardRequestValidationError{}

// Validate checks the field values on BriefingType with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BriefingType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BriefingType with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BriefingTypeMultiError, or
// nil if none found.
func (m *BriefingType) ValidateAll() error {
	return m.validate(true)
}

func (m *BriefingType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DisplayName

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetExpiresAfter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BriefingTypeValidationError{
					field:  "ExpiresAfter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BriefingTypeValidationError{
					field:  "ExpiresAfter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiresAfter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BriefingTypeValidationError{
				field:  "ExpiresAfter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BriefingTypeMultiError(errors)
	}

	return nil
}

// BriefingTypeMultiError is an error wrapping multiple validation errors
// returned by BriefingType.ValidateAll() if the designated constraints aren't met.
type BriefingTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BriefingTypeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BriefingTypeMultiError) AllErrors() []error { return m }

// BriefingTypeValidationError is the validation error returned by
// BriefingType.Validate if the designated constraints aren't met.
type BriefingTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BriefingTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BriefingTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BriefingTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BriefingTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BriefingTypeValidationError) ErrorName() string { return "BriefingTypeValidationError" }

// Error satisfies the builtin error interface
func (e BriefingTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBriefingType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BriefingTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BriefingTypeValidationError{}

// Validate checks the field values on CreateBriefingTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBriefingTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBriefingTypeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBriefingTypeRequestMultiError, or nil if none found.
func (m *CreateBriefingTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBriefingTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BriefingTypeId

	if all {
		switch v := interface{}(m.GetBriefingType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBriefingTypeRequestValidationError{
					field:  "BriefingType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBriefingTypeRequestValidationError{
					field:  "BriefingType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBriefingType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBriefingTypeRequestValidationError{
				field:  "BriefingType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBriefingTypeRequestMultiError(errors)
	}

	return nil
}

// CreateBriefingTypeRequestMultiError is an error wrapping multiple validation
// errors returned by CreateBriefingTypeRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateBriefingTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBriefingTypeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBriefingTypeRequestMultiError) AllErrors() []error { return m }

// CreateBriefingTypeRequestValidationError is the validation error returned by
// CreateBriefingTypeRequest.Validate if the designated constraints aren't met.
type CreateBriefingTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBriefingTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBriefingTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBriefingTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBriefingTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBriefingTypeRequestValidationError) ErrorName() string {
	return "CreateBriefingTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBriefingTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBriefingTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBriefingTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBriefingTypeRequestValidationError{}

// Validate checks the field values on GetBriefingTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBriefingTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBriefingTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBriefingTypeRequestMultiError, or nil if none found.
func (m *GetBriefingTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBriefingTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetBriefingTypeRequestMultiError(errors)
	}

	return nil
}

// GetBriefingTypeRequestMultiError is an error wrapping multiple validation
// errors returned by GetBriefingTypeRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBriefingTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBriefingTypeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBriefingTypeRequestMultiError) AllErrors() []error { return m }

// GetBriefingTypeRequestValidationError is the validation error returned by
// GetBriefingTypeRequest.Validate if the designated constraints aren't met.
type GetBriefingTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBriefingTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBriefingTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBriefingTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBriefingTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBriefingTypeRequestValidationError) ErrorName() string {
	return "GetBriefingTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBriefingTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBriefingTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBriefingTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBriefingTypeRequestValidationError{}

// Validate checks the field values on ListBriefingTypesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBriefingTypesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBriefingTypesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBriefingTypesRequestMultiError, or nil if none found.
func (m *ListBriefingTypesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBriefingTypesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBriefingTypesRequestMultiError(errors)
	}

	return nil
}

// ListBriefingTypesRequestMultiError is an error wrapping multiple validation
// errors returned by ListBriefingTypesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListBriefingTypesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBriefingTypesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBriefingTypesRequestMultiError) AllErrors() []error { return m }

// ListBriefingTypesRequestValidationError is the validation error returned by
// ListBriefingTypesRequest.Validate if the designated constraints aren't met.
type ListBriefingTypesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBriefingTypesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBriefingTypesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBriefingTypesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBriefingTypesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBriefingTypesRequestValidationError) ErrorName() string {
	return "ListBriefingTypesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBriefingTypesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBriefingTypesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBriefingTypesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBriefingTypesRequestValidationError{}

// Validate checks the field values on ListBriefingTypesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBriefingTypesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBriefingTypesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBriefingTypesResponseMultiError, or nil if none found.
func (m *ListBriefingTypesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBriefingTypesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBriefingTypes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBriefingTypesResponseValidationError{
						field:  fmt.Sprintf("BriefingTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBriefingTypesResponseValidationError{
						field:  fmt.Sprintf("BriefingTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBriefingTypesResponseValidationError{
					field:  fmt.Sprintf("BriefingTypes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListBriefingTypesResponseMultiError(errors)
	}

	return nil
}

// ListBriefingTypesResponseMultiError is an error wrapping multiple validation
// errors returned by ListBriefingTypesResponse.ValidateAll() if the
// designated constraints aren't met.
type ListBriefingTypesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBriefingTypesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBriefingTypesResponseMultiError) AllErrors() []error { return m }

// ListBriefingTypesResponseValidationError is the validation error returned by
// ListBriefingTypesResponse.Validate if the designated constraints aren't met.
type ListBriefingTypesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBriefingTypesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBriefingTypesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBriefingTypesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBriefingTypesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBriefingTypesResponseValidationError) ErrorName() string {
	return "ListBriefingTypesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBriefingTypesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBriefingTypesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBriefingTypesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBriefingTypesResponseValidationError{}

// Validate checks the field values on UpdateBriefingTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBriefingTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBriefingTypeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBriefingTypeRequestMultiError, or nil if none found.
func (m *UpdateBriefingTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBriefingTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBriefingType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBriefingTypeRequestValidationError{
					field:  "BriefingType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBriefingTypeRequestValidationError{
					field:  "BriefingType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBriefingType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBriefingTypeRequestValidationError{
				field:  "BriefingType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBriefingTypeRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBriefingTypeRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBriefingTypeRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBriefingTypeRequestMultiError(errors)
	}

	return nil
}

// UpdateBriefingTypeRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateBriefingTypeRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateBriefingTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBriefingTypeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBriefingTypeRequestMultiError) AllErrors() []error { return m }

// UpdateBriefingTypeRequestValidationError is the validation error returned by
// UpdateBriefingTypeRequest.Validate if the designated constraints aren't met.
type UpdateBriefingTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBriefingTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBriefingTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBriefingTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBriefingTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBriefingTypeRequestValidationError) ErrorName() string {
	return "UpdateBriefingTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBriefingTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBriefingTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBriefingTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBriefingTypeRequestValidationError{}

// Validate checks the field values on DeleteBriefingTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBriefingTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBriefingTypeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBriefingTypeRequestMultiError, or nil if none found.
func (m *DeleteBriefingTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBriefingTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteBriefingTypeRequestMultiError(errors)
	}

	return nil
}

// DeleteBriefingTypeRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteBriefingTypeRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteBriefingTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBriefingTypeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBriefingTypeRequestMultiError) AllErrors() []error { return m }

// DeleteBriefingTypeRequestValidationError is the validation error returned by
// DeleteBriefingTypeRequest.Validate if the designated constraints aren't met.
type DeleteBriefingTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBriefingTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBriefingTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBriefingTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBriefingTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBriefingTypeRequestValidationError) ErrorName() string {
	return "DeleteBriefingTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBriefingTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBriefingTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBriefingTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBriefingTypeRequestValidationError{}

// Validate checks the field values on Briefing with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Briefing) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Briefing with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BriefingMultiError, or nil
// if none found.
func (m *Briefing) ValidateAll() error {
	return m.validate(true)
}

func (m *Briefing) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for BriefingType

	if len(errors) > 0 {
		return BriefingMultiError(errors)
	}

	return nil
}

// BriefingMultiError is an error wrapping multiple validation errors returned
// by Briefing.ValidateAll() if the designated constraints aren't met.
type BriefingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BriefingMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BriefingMultiError) AllErrors() []error { return m }

// BriefingValidationError is the validation error returned by
// Briefing.Validate if the designated constraints aren't met.
type BriefingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BriefingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BriefingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BriefingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BriefingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BriefingValidationError) ErrorName() string { return "BriefingValidationError" }

// Error satisfies the builtin error interface
func (e BriefingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBriefing.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BriefingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BriefingValidationError{}

// Validate checks the field values on CreateBriefingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBriefingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBriefingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBriefingRequestMultiError, or nil if none found.
func (m *CreateBriefingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBriefingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BriefingId

	if all {
		switch v := interface{}(m.GetBriefing()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBriefingRequestValidationError{
					field:  "Briefing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBriefingRequestValidationError{
					field:  "Briefing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBriefing()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBriefingRequestValidationError{
				field:  "Briefing",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBriefingRequestMultiError(errors)
	}

	return nil
}

// CreateBriefingRequestMultiError is an error wrapping multiple validation
// errors returned by CreateBriefingRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBriefingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBriefingRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBriefingRequestMultiError) AllErrors() []error { return m }

// CreateBriefingRequestValidationError is the validation error returned by
// CreateBriefingRequest.Validate if the designated constraints aren't met.
type CreateBriefingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBriefingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBriefingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBriefingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBriefingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBriefingRequestValidationError) ErrorName() string {
	return "CreateBriefingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBriefingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBriefingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBriefingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBriefingRequestValidationError{}

// Validate checks the field values on GetBriefingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBriefingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBriefingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBriefingRequestMultiError, or nil if none found.
func (m *GetBriefingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBriefingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetBriefingRequestMultiError(errors)
	}

	return nil
}

// GetBriefingRequestMultiError is an error wrapping multiple validation errors
// returned by GetBriefingRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBriefingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBriefingRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBriefingRequestMultiError) AllErrors() []error { return m }

// GetBriefingRequestValidationError is the validation error returned by
// GetBriefingRequest.Validate if the designated constraints aren't met.
type GetBriefingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBriefingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBriefingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBriefingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBriefingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBriefingRequestValidationError) ErrorName() string {
	return "GetBriefingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBriefingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBriefingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBriefingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBriefingRequestValidationError{}

// Validate checks the field values on ListBriefingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBriefingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBriefingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBriefingsRequestMultiError, or nil if none found.
func (m *ListBriefingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBriefingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBriefingsRequestMultiError(errors)
	}

	return nil
}

// ListBriefingsRequestMultiError is an error wrapping multiple validation
// errors returned by ListBriefingsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListBriefingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBriefingsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBriefingsRequestMultiError) AllErrors() []error { return m }

// ListBriefingsRequestValidationError is the validation error returned by
// ListBriefingsRequest.Validate if the designated constraints aren't met.
type ListBriefingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBriefingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBriefingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBriefingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBriefingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBriefingsRequestValidationError) ErrorName() string {
	return "ListBriefingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBriefingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBriefingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBriefingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBriefingsRequestValidationError{}

// Validate checks the field values on ListBriefingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBriefingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBriefingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBriefingsResponseMultiError, or nil if none found.
func (m *ListBriefingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBriefingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBriefings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBriefingsResponseValidationError{
						field:  fmt.Sprintf("Briefings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBriefingsResponseValidationError{
						field:  fmt.Sprintf("Briefings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBriefingsResponseValidationError{
					field:  fmt.Sprintf("Briefings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListBriefingsResponseMultiError(errors)
	}

	return nil
}

// ListBriefingsResponseMultiError is an error wrapping multiple validation
// errors returned by ListBriefingsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBriefingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBriefingsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBriefingsResponseMultiError) AllErrors() []error { return m }

// ListBriefingsResponseValidationError is the validation error returned by
// ListBriefingsResponse.Validate if the designated constraints aren't met.
type ListBriefingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBriefingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBriefingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBriefingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBriefingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBriefingsResponseValidationError) ErrorName() string {
	return "ListBriefingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBriefingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBriefingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBriefingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBriefingsResponseValidationError{}

// Validate checks the field values on UpdateBriefingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBriefingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBriefingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBriefingRequestMultiError, or nil if none found.
func (m *UpdateBriefingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBriefingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBriefing()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBriefingRequestValidationError{
					field:  "Briefing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBriefingRequestValidationError{
					field:  "Briefing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBriefing()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBriefingRequestValidationError{
				field:  "Briefing",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBriefingRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBriefingRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBriefingRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBriefingRequestMultiError(errors)
	}

	return nil
}

// UpdateBriefingRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateBriefingRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBriefingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBriefingRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBriefingRequestMultiError) AllErrors() []error { return m }

// UpdateBriefingRequestValidationError is the validation error returned by
// UpdateBriefingRequest.Validate if the designated constraints aren't met.
type UpdateBriefingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBriefingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBriefingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBriefingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBriefingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBriefingRequestValidationError) ErrorName() string {
	return "UpdateBriefingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBriefingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBriefingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBriefingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBriefingRequestValidationError{}

// Validate checks the field values on DeleteBriefingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBriefingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBriefingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBriefingRequestMultiError, or nil if none found.
func (m *DeleteBriefingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBriefingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteBriefingRequestMultiError(errors)
	}

	return nil
}

// DeleteBriefingRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteBriefingRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteBriefingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBriefingRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBriefingRequestMultiError) AllErrors() []error { return m }

// DeleteBriefingRequestValidationError is the validation error returned by
// DeleteBriefingRequest.Validate if the designated constraints aren't met.
type DeleteBriefingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBriefingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBriefingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBriefingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBriefingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBriefingRequestValidationError) ErrorName() string {
	return "DeleteBriefingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBriefingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBriefingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBriefingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBriefingRequestValidationError{}

// Validate checks the field values on Presence with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Presence) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Presence with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PresenceMultiError, or nil
// if none found.
func (m *Presence) ValidateAll() error {
	return m.validate(true)
}

func (m *Presence) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for MemberId

	if all {
		switch v := interface{}(m.GetCheckinTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PresenceValidationError{
					field:  "CheckinTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PresenceValidationError{
					field:  "CheckinTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCheckinTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PresenceValidationError{
				field:  "CheckinTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCheckoutTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PresenceValidationError{
					field:  "CheckoutTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PresenceValidationError{
					field:  "CheckoutTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCheckoutTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PresenceValidationError{
				field:  "CheckoutTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PresenceMultiError(errors)
	}

	return nil
}

// PresenceMultiError is an error wrapping multiple validation errors returned
// by Presence.ValidateAll() if the designated constraints aren't met.
type PresenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PresenceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PresenceMultiError) AllErrors() []error { return m }

// PresenceValidationError is the validation error returned by
// Presence.Validate if the designated constraints aren't met.
type PresenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PresenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PresenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PresenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PresenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PresenceValidationError) ErrorName() string { return "PresenceValidationError" }

// Error satisfies the builtin error interface
func (e PresenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPresence.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PresenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PresenceValidationError{}

// Validate checks the field values on ListPresencesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPresencesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPresencesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPresencesRequestMultiError, or nil if none found.
func (m *ListPresencesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPresencesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageToken

	if m.MemberId != nil {
		// no validation rules for MemberId
	}

	if m.CheckinTimeAfter != nil {

		if all {
			switch v := interface{}(m.GetCheckinTimeAfter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPresencesRequestValidationError{
						field:  "CheckinTimeAfter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPresencesRequestValidationError{
						field:  "CheckinTimeAfter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCheckinTimeAfter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPresencesRequestValidationError{
					field:  "CheckinTimeAfter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.CheckinTimeBefore != nil {

		if all {
			switch v := interface{}(m.GetCheckinTimeBefore()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPresencesRequestValidationError{
						field:  "CheckinTimeBefore",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPresencesRequestValidationError{
						field:  "CheckinTimeBefore",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCheckinTimeBefore()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPresencesRequestValidationError{
					field:  "CheckinTimeBefore",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.CheckoutTimeAfter != nil {

		if all {
			switch v := interface{}(m.GetCheckoutTimeAfter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPresencesRequestValidationError{
						field:  "CheckoutTimeAfter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPresencesRequestValidationError{
						field:  "CheckoutTimeAfter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCheckoutTimeAfter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPresencesRequestValidationError{
					field:  "CheckoutTimeAfter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.CheckoutTimeBefore != nil {

		if all {
			switch v := interface{}(m.GetCheckoutTimeBefore()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPresencesRequestValidationError{
						field:  "CheckoutTimeBefore",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPresencesRequestValidationError{
						field:  "CheckoutTimeBefore",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCheckoutTimeBefore()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPresencesRequestValidationError{
					field:  "CheckoutTimeBefore",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPresencesRequestMultiError(errors)
	}

	return nil
}

// ListPresencesRequestMultiError is an error wrapping multiple validation
// errors returned by ListPresencesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListPresencesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPresencesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPresencesRequestMultiError) AllErrors() []error { return m }

// ListPresencesRequestValidationError is the validation error returned by
// ListPresencesRequest.Validate if the designated constraints aren't met.
type ListPresencesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPresencesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPresencesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPresencesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPresencesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPresencesRequestValidationError) ErrorName() string {
	return "ListPresencesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPresencesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPresencesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPresencesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPresencesRequestValidationError{}

// Validate checks the field values on ListPresencesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPresencesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPresencesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPresencesResponseMultiError, or nil if none found.
func (m *ListPresencesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPresencesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPresence() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPresencesResponseValidationError{
						field:  fmt.Sprintf("Presence[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPresencesResponseValidationError{
						field:  fmt.Sprintf("Presence[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPresencesResponseValidationError{
					field:  fmt.Sprintf("Presence[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListPresencesResponseMultiError(errors)
	}

	return nil
}

// ListPresencesResponseMultiError is an error wrapping multiple validation
// errors returned by ListPresencesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListPresencesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPresencesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPresencesResponseMultiError) AllErrors() []error { return m }

// ListPresencesResponseValidationError is the validation error returned by
// ListPresencesResponse.Validate if the designated constraints aren't met.
type ListPresencesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPresencesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPresencesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPresencesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPresencesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPresencesResponseValidationError) ErrorName() string {
	return "ListPresencesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPresencesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPresencesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPresencesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPresencesResponseValidationError{}

// Validate checks the field values on CheckinRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckinRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckinRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CheckinRequestMultiError,
// or nil if none found.
func (m *CheckinRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckinRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MemberId

	if len(errors) > 0 {
		return CheckinRequestMultiError(errors)
	}

	return nil
}

// CheckinRequestMultiError is an error wrapping multiple validation errors
// returned by CheckinRequest.ValidateAll() if the designated constraints
// aren't met.
type CheckinRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckinRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckinRequestMultiError) AllErrors() []error { return m }

// CheckinRequestValidationError is the validation error returned by
// CheckinRequest.Validate if the designated constraints aren't met.
type CheckinRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckinRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckinRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckinRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckinRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckinRequestValidationError) ErrorName() string { return "CheckinRequestValidationError" }

// Error satisfies the builtin error interface
func (e CheckinRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckinRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckinRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckinRequestValidationError{}

// Validate checks the field values on CheckoutRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CheckoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckoutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckoutRequestMultiError, or nil if none found.
func (m *CheckoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MemberId

	if len(errors) > 0 {
		return CheckoutRequestMultiError(errors)
	}

	return nil
}

// CheckoutRequestMultiError is an error wrapping multiple validation errors
// returned by CheckoutRequest.ValidateAll() if the designated constraints
// aren't met.
type CheckoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckoutRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckoutRequestMultiError) AllErrors() []error { return m }

// CheckoutRequestValidationError is the validation error returned by
// CheckoutRequest.Validate if the designated constraints aren't met.
type CheckoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckoutRequestValidationError) ErrorName() string { return "CheckoutRequestValidationError" }

// Error satisfies the builtin error interface
func (e CheckoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckoutRequestValidationError{}

// Validate checks the field values on UpdatePresenceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePresenceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePresenceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePresenceRequestMultiError, or nil if none found.
func (m *UpdatePresenceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePresenceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPresence()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePresenceRequestValidationError{
					field:  "Presence",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePresenceRequestValidationError{
					field:  "Presence",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPresence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePresenceRequestValidationError{
				field:  "Presence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePresenceRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePresenceRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePresenceRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePresenceRequestMultiError(errors)
	}

	return nil
}

// UpdatePresenceRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePresenceRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePresenceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePresenceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePresenceRequestMultiError) AllErrors() []error { return m }

// UpdatePresenceRequestValidationError is the validation error returned by
// UpdatePresenceRequest.Validate if the designated constraints aren't met.
type UpdatePresenceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePresenceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePresenceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePresenceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePresenceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePresenceRequestValidationError) ErrorName() string {
	return "UpdatePresenceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePresenceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePresenceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePresenceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePresenceRequestValidationError{}

// Validate checks the field values on DeletePresenceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePresenceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePresenceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePresenceRequestMultiError, or nil if none found.
func (m *DeletePresenceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePresenceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeletePresenceRequestMultiError(errors)
	}

	return nil
}

// DeletePresenceRequestMultiError is an error wrapping multiple validation
// errors returned by DeletePresenceRequest.ValidateAll() if the designated
// constraints aren't met.
type DeletePresenceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePresenceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePresenceRequestMultiError) AllErrors() []error { return m }

// DeletePresenceRequestValidationError is the validation error returned by
// DeletePresenceRequest.Validate if the designated constraints aren't met.
type DeletePresenceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePresenceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePresenceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePresenceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePresenceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePresenceRequestValidationError) ErrorName() string {
	return "DeletePresenceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePresenceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePresenceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePresenceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePresenceRequestValidationError{}
