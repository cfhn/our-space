// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MemberService_CreateMember_FullMethodName   = "/ourspace_backend.v1.MemberService/CreateMember"
	MemberService_GetMember_FullMethodName      = "/ourspace_backend.v1.MemberService/GetMember"
	MemberService_ListMembers_FullMethodName    = "/ourspace_backend.v1.MemberService/ListMembers"
	MemberService_UpdateMember_FullMethodName   = "/ourspace_backend.v1.MemberService/UpdateMember"
	MemberService_DeleteMember_FullMethodName   = "/ourspace_backend.v1.MemberService/DeleteMember"
	MemberService_ListMemberTags_FullMethodName = "/ourspace_backend.v1.MemberService/ListMemberTags"
)

// MemberServiceClient is the client API for MemberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberServiceClient interface {
	CreateMember(ctx context.Context, in *CreateMemberRequest, opts ...grpc.CallOption) (*Member, error)
	GetMember(ctx context.Context, in *GetMemberRequest, opts ...grpc.CallOption) (*Member, error)
	ListMembers(ctx context.Context, in *ListMembersRequest, opts ...grpc.CallOption) (*ListMembersResponse, error)
	UpdateMember(ctx context.Context, in *UpdateMemberRequest, opts ...grpc.CallOption) (*Member, error)
	DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListMemberTags(ctx context.Context, in *ListMemberTagsRequest, opts ...grpc.CallOption) (*ListMemberTagsResponse, error)
}

type memberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberServiceClient(cc grpc.ClientConnInterface) MemberServiceClient {
	return &memberServiceClient{cc}
}

func (c *memberServiceClient) CreateMember(ctx context.Context, in *CreateMemberRequest, opts ...grpc.CallOption) (*Member, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Member)
	err := c.cc.Invoke(ctx, MemberService_CreateMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetMember(ctx context.Context, in *GetMemberRequest, opts ...grpc.CallOption) (*Member, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Member)
	err := c.cc.Invoke(ctx, MemberService_GetMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ListMembers(ctx context.Context, in *ListMembersRequest, opts ...grpc.CallOption) (*ListMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMembersResponse)
	err := c.cc.Invoke(ctx, MemberService_ListMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) UpdateMember(ctx context.Context, in *UpdateMemberRequest, opts ...grpc.CallOption) (*Member, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Member)
	err := c.cc.Invoke(ctx, MemberService_UpdateMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MemberService_DeleteMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ListMemberTags(ctx context.Context, in *ListMemberTagsRequest, opts ...grpc.CallOption) (*ListMemberTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMemberTagsResponse)
	err := c.cc.Invoke(ctx, MemberService_ListMemberTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberServiceServer is the server API for MemberService service.
// All implementations must embed UnimplementedMemberServiceServer
// for forward compatibility.
type MemberServiceServer interface {
	CreateMember(context.Context, *CreateMemberRequest) (*Member, error)
	GetMember(context.Context, *GetMemberRequest) (*Member, error)
	ListMembers(context.Context, *ListMembersRequest) (*ListMembersResponse, error)
	UpdateMember(context.Context, *UpdateMemberRequest) (*Member, error)
	DeleteMember(context.Context, *DeleteMemberRequest) (*emptypb.Empty, error)
	ListMemberTags(context.Context, *ListMemberTagsRequest) (*ListMemberTagsResponse, error)
	mustEmbedUnimplementedMemberServiceServer()
}

// UnimplementedMemberServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMemberServiceServer struct{}

func (UnimplementedMemberServiceServer) CreateMember(context.Context, *CreateMemberRequest) (*Member, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMember not implemented")
}
func (UnimplementedMemberServiceServer) GetMember(context.Context, *GetMemberRequest) (*Member, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMember not implemented")
}
func (UnimplementedMemberServiceServer) ListMembers(context.Context, *ListMembersRequest) (*ListMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMembers not implemented")
}
func (UnimplementedMemberServiceServer) UpdateMember(context.Context, *UpdateMemberRequest) (*Member, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMember not implemented")
}
func (UnimplementedMemberServiceServer) DeleteMember(context.Context, *DeleteMemberRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMember not implemented")
}
func (UnimplementedMemberServiceServer) ListMemberTags(context.Context, *ListMemberTagsRequest) (*ListMemberTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMemberTags not implemented")
}
func (UnimplementedMemberServiceServer) mustEmbedUnimplementedMemberServiceServer() {}
func (UnimplementedMemberServiceServer) testEmbeddedByValue()                       {}

// UnsafeMemberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberServiceServer will
// result in compilation errors.
type UnsafeMemberServiceServer interface {
	mustEmbedUnimplementedMemberServiceServer()
}

func RegisterMemberServiceServer(s grpc.ServiceRegistrar, srv MemberServiceServer) {
	// If the following call pancis, it indicates UnimplementedMemberServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MemberService_ServiceDesc, srv)
}

func _MemberService_CreateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).CreateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_CreateMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).CreateMember(ctx, req.(*CreateMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_GetMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetMember(ctx, req.(*GetMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ListMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ListMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_ListMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ListMembers(ctx, req.(*ListMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_UpdateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).UpdateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_UpdateMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).UpdateMember(ctx, req.(*UpdateMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_DeleteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).DeleteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_DeleteMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).DeleteMember(ctx, req.(*DeleteMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ListMemberTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMemberTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ListMemberTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_ListMemberTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ListMemberTags(ctx, req.(*ListMemberTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberService_ServiceDesc is the grpc.ServiceDesc for MemberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ourspace_backend.v1.MemberService",
	HandlerType: (*MemberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMember",
			Handler:    _MemberService_CreateMember_Handler,
		},
		{
			MethodName: "GetMember",
			Handler:    _MemberService_GetMember_Handler,
		},
		{
			MethodName: "ListMembers",
			Handler:    _MemberService_ListMembers_Handler,
		},
		{
			MethodName: "UpdateMember",
			Handler:    _MemberService_UpdateMember_Handler,
		},
		{
			MethodName: "DeleteMember",
			Handler:    _MemberService_DeleteMember_Handler,
		},
		{
			MethodName: "ListMemberTags",
			Handler:    _MemberService_ListMemberTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

const (
	CardService_CreateCard_FullMethodName = "/ourspace_backend.v1.CardService/CreateCard"
	CardService_GetCard_FullMethodName    = "/ourspace_backend.v1.CardService/GetCard"
	CardService_ListCards_FullMethodName  = "/ourspace_backend.v1.CardService/ListCards"
	CardService_UpdateCard_FullMethodName = "/ourspace_backend.v1.CardService/UpdateCard"
	CardService_DeleteCard_FullMethodName = "/ourspace_backend.v1.CardService/DeleteCard"
)

// CardServiceClient is the client API for CardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardServiceClient interface {
	CreateCard(ctx context.Context, in *CreateCardRequest, opts ...grpc.CallOption) (*Card, error)
	GetCard(ctx context.Context, in *GetCardRequest, opts ...grpc.CallOption) (*Card, error)
	ListCards(ctx context.Context, in *ListCardsRequest, opts ...grpc.CallOption) (*ListCardsResponse, error)
	UpdateCard(ctx context.Context, in *UpdateCardRequest, opts ...grpc.CallOption) (*Card, error)
	DeleteCard(ctx context.Context, in *DeleteCardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type cardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCardServiceClient(cc grpc.ClientConnInterface) CardServiceClient {
	return &cardServiceClient{cc}
}

func (c *cardServiceClient) CreateCard(ctx context.Context, in *CreateCardRequest, opts ...grpc.CallOption) (*Card, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Card)
	err := c.cc.Invoke(ctx, CardService_CreateCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) GetCard(ctx context.Context, in *GetCardRequest, opts ...grpc.CallOption) (*Card, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Card)
	err := c.cc.Invoke(ctx, CardService_GetCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) ListCards(ctx context.Context, in *ListCardsRequest, opts ...grpc.CallOption) (*ListCardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCardsResponse)
	err := c.cc.Invoke(ctx, CardService_ListCards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) UpdateCard(ctx context.Context, in *UpdateCardRequest, opts ...grpc.CallOption) (*Card, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Card)
	err := c.cc.Invoke(ctx, CardService_UpdateCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) DeleteCard(ctx context.Context, in *DeleteCardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CardService_DeleteCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardServiceServer is the server API for CardService service.
// All implementations must embed UnimplementedCardServiceServer
// for forward compatibility.
type CardServiceServer interface {
	CreateCard(context.Context, *CreateCardRequest) (*Card, error)
	GetCard(context.Context, *GetCardRequest) (*Card, error)
	ListCards(context.Context, *ListCardsRequest) (*ListCardsResponse, error)
	UpdateCard(context.Context, *UpdateCardRequest) (*Card, error)
	DeleteCard(context.Context, *DeleteCardRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCardServiceServer()
}

// UnimplementedCardServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCardServiceServer struct{}

func (UnimplementedCardServiceServer) CreateCard(context.Context, *CreateCardRequest) (*Card, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCard not implemented")
}
func (UnimplementedCardServiceServer) GetCard(context.Context, *GetCardRequest) (*Card, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCard not implemented")
}
func (UnimplementedCardServiceServer) ListCards(context.Context, *ListCardsRequest) (*ListCardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCards not implemented")
}
func (UnimplementedCardServiceServer) UpdateCard(context.Context, *UpdateCardRequest) (*Card, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCard not implemented")
}
func (UnimplementedCardServiceServer) DeleteCard(context.Context, *DeleteCardRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCard not implemented")
}
func (UnimplementedCardServiceServer) mustEmbedUnimplementedCardServiceServer() {}
func (UnimplementedCardServiceServer) testEmbeddedByValue()                     {}

// UnsafeCardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardServiceServer will
// result in compilation errors.
type UnsafeCardServiceServer interface {
	mustEmbedUnimplementedCardServiceServer()
}

func RegisterCardServiceServer(s grpc.ServiceRegistrar, srv CardServiceServer) {
	// If the following call pancis, it indicates UnimplementedCardServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CardService_ServiceDesc, srv)
}

func _CardService_CreateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).CreateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_CreateCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).CreateCard(ctx, req.(*CreateCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_GetCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).GetCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_GetCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).GetCard(ctx, req.(*GetCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_ListCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).ListCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_ListCards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).ListCards(ctx, req.(*ListCardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_UpdateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).UpdateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_UpdateCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).UpdateCard(ctx, req.(*UpdateCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_DeleteCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).DeleteCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_DeleteCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).DeleteCard(ctx, req.(*DeleteCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CardService_ServiceDesc is the grpc.ServiceDesc for CardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ourspace_backend.v1.CardService",
	HandlerType: (*CardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCard",
			Handler:    _CardService_CreateCard_Handler,
		},
		{
			MethodName: "GetCard",
			Handler:    _CardService_GetCard_Handler,
		},
		{
			MethodName: "ListCards",
			Handler:    _CardService_ListCards_Handler,
		},
		{
			MethodName: "UpdateCard",
			Handler:    _CardService_UpdateCard_Handler,
		},
		{
			MethodName: "DeleteCard",
			Handler:    _CardService_DeleteCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

const (
	BriefingService_CreateBriefing_FullMethodName     = "/ourspace_backend.v1.BriefingService/CreateBriefing"
	BriefingService_GetBriefing_FullMethodName        = "/ourspace_backend.v1.BriefingService/GetBriefing"
	BriefingService_ListBriefings_FullMethodName      = "/ourspace_backend.v1.BriefingService/ListBriefings"
	BriefingService_UpdateBriefing_FullMethodName     = "/ourspace_backend.v1.BriefingService/UpdateBriefing"
	BriefingService_DeleteBriefing_FullMethodName     = "/ourspace_backend.v1.BriefingService/DeleteBriefing"
	BriefingService_CreateBriefingType_FullMethodName = "/ourspace_backend.v1.BriefingService/CreateBriefingType"
	BriefingService_GetBriefingType_FullMethodName    = "/ourspace_backend.v1.BriefingService/GetBriefingType"
	BriefingService_ListBriefingTypes_FullMethodName  = "/ourspace_backend.v1.BriefingService/ListBriefingTypes"
	BriefingService_UpdateBriefingType_FullMethodName = "/ourspace_backend.v1.BriefingService/UpdateBriefingType"
	BriefingService_DeleteBriefingType_FullMethodName = "/ourspace_backend.v1.BriefingService/DeleteBriefingType"
)

// BriefingServiceClient is the client API for BriefingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BriefingServiceClient interface {
	CreateBriefing(ctx context.Context, in *CreateBriefingRequest, opts ...grpc.CallOption) (*Briefing, error)
	GetBriefing(ctx context.Context, in *GetBriefingRequest, opts ...grpc.CallOption) (*Briefing, error)
	ListBriefings(ctx context.Context, in *ListBriefingsRequest, opts ...grpc.CallOption) (*ListBriefingsResponse, error)
	UpdateBriefing(ctx context.Context, in *UpdateBriefingRequest, opts ...grpc.CallOption) (*Briefing, error)
	DeleteBriefing(ctx context.Context, in *DeleteBriefingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Briefing types
	CreateBriefingType(ctx context.Context, in *CreateBriefingTypeRequest, opts ...grpc.CallOption) (*BriefingType, error)
	GetBriefingType(ctx context.Context, in *GetBriefingTypeRequest, opts ...grpc.CallOption) (*BriefingType, error)
	ListBriefingTypes(ctx context.Context, in *ListBriefingTypesRequest, opts ...grpc.CallOption) (*ListBriefingTypesResponse, error)
	UpdateBriefingType(ctx context.Context, in *UpdateBriefingTypeRequest, opts ...grpc.CallOption) (*BriefingType, error)
	DeleteBriefingType(ctx context.Context, in *DeleteBriefingTypeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type briefingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBriefingServiceClient(cc grpc.ClientConnInterface) BriefingServiceClient {
	return &briefingServiceClient{cc}
}

func (c *briefingServiceClient) CreateBriefing(ctx context.Context, in *CreateBriefingRequest, opts ...grpc.CallOption) (*Briefing, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Briefing)
	err := c.cc.Invoke(ctx, BriefingService_CreateBriefing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *briefingServiceClient) GetBriefing(ctx context.Context, in *GetBriefingRequest, opts ...grpc.CallOption) (*Briefing, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Briefing)
	err := c.cc.Invoke(ctx, BriefingService_GetBriefing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *briefingServiceClient) ListBriefings(ctx context.Context, in *ListBriefingsRequest, opts ...grpc.CallOption) (*ListBriefingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBriefingsResponse)
	err := c.cc.Invoke(ctx, BriefingService_ListBriefings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *briefingServiceClient) UpdateBriefing(ctx context.Context, in *UpdateBriefingRequest, opts ...grpc.CallOption) (*Briefing, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Briefing)
	err := c.cc.Invoke(ctx, BriefingService_UpdateBriefing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *briefingServiceClient) DeleteBriefing(ctx context.Context, in *DeleteBriefingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BriefingService_DeleteBriefing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *briefingServiceClient) CreateBriefingType(ctx context.Context, in *CreateBriefingTypeRequest, opts ...grpc.CallOption) (*BriefingType, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BriefingType)
	err := c.cc.Invoke(ctx, BriefingService_CreateBriefingType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *briefingServiceClient) GetBriefingType(ctx context.Context, in *GetBriefingTypeRequest, opts ...grpc.CallOption) (*BriefingType, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BriefingType)
	err := c.cc.Invoke(ctx, BriefingService_GetBriefingType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *briefingServiceClient) ListBriefingTypes(ctx context.Context, in *ListBriefingTypesRequest, opts ...grpc.CallOption) (*ListBriefingTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBriefingTypesResponse)
	err := c.cc.Invoke(ctx, BriefingService_ListBriefingTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *briefingServiceClient) UpdateBriefingType(ctx context.Context, in *UpdateBriefingTypeRequest, opts ...grpc.CallOption) (*BriefingType, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BriefingType)
	err := c.cc.Invoke(ctx, BriefingService_UpdateBriefingType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *briefingServiceClient) DeleteBriefingType(ctx context.Context, in *DeleteBriefingTypeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BriefingService_DeleteBriefingType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BriefingServiceServer is the server API for BriefingService service.
// All implementations must embed UnimplementedBriefingServiceServer
// for forward compatibility.
type BriefingServiceServer interface {
	CreateBriefing(context.Context, *CreateBriefingRequest) (*Briefing, error)
	GetBriefing(context.Context, *GetBriefingRequest) (*Briefing, error)
	ListBriefings(context.Context, *ListBriefingsRequest) (*ListBriefingsResponse, error)
	UpdateBriefing(context.Context, *UpdateBriefingRequest) (*Briefing, error)
	DeleteBriefing(context.Context, *DeleteBriefingRequest) (*emptypb.Empty, error)
	// Briefing types
	CreateBriefingType(context.Context, *CreateBriefingTypeRequest) (*BriefingType, error)
	GetBriefingType(context.Context, *GetBriefingTypeRequest) (*BriefingType, error)
	ListBriefingTypes(context.Context, *ListBriefingTypesRequest) (*ListBriefingTypesResponse, error)
	UpdateBriefingType(context.Context, *UpdateBriefingTypeRequest) (*BriefingType, error)
	DeleteBriefingType(context.Context, *DeleteBriefingTypeRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedBriefingServiceServer()
}

// UnimplementedBriefingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBriefingServiceServer struct{}

func (UnimplementedBriefingServiceServer) CreateBriefing(context.Context, *CreateBriefingRequest) (*Briefing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBriefing not implemented")
}
func (UnimplementedBriefingServiceServer) GetBriefing(context.Context, *GetBriefingRequest) (*Briefing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBriefing not implemented")
}
func (UnimplementedBriefingServiceServer) ListBriefings(context.Context, *ListBriefingsRequest) (*ListBriefingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBriefings not implemented")
}
func (UnimplementedBriefingServiceServer) UpdateBriefing(context.Context, *UpdateBriefingRequest) (*Briefing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBriefing not implemented")
}
func (UnimplementedBriefingServiceServer) DeleteBriefing(context.Context, *DeleteBriefingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBriefing not implemented")
}
func (UnimplementedBriefingServiceServer) CreateBriefingType(context.Context, *CreateBriefingTypeRequest) (*BriefingType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBriefingType not implemented")
}
func (UnimplementedBriefingServiceServer) GetBriefingType(context.Context, *GetBriefingTypeRequest) (*BriefingType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBriefingType not implemented")
}
func (UnimplementedBriefingServiceServer) ListBriefingTypes(context.Context, *ListBriefingTypesRequest) (*ListBriefingTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBriefingTypes not implemented")
}
func (UnimplementedBriefingServiceServer) UpdateBriefingType(context.Context, *UpdateBriefingTypeRequest) (*BriefingType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBriefingType not implemented")
}
func (UnimplementedBriefingServiceServer) DeleteBriefingType(context.Context, *DeleteBriefingTypeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBriefingType not implemented")
}
func (UnimplementedBriefingServiceServer) mustEmbedUnimplementedBriefingServiceServer() {}
func (UnimplementedBriefingServiceServer) testEmbeddedByValue()                         {}

// UnsafeBriefingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BriefingServiceServer will
// result in compilation errors.
type UnsafeBriefingServiceServer interface {
	mustEmbedUnimplementedBriefingServiceServer()
}

func RegisterBriefingServiceServer(s grpc.ServiceRegistrar, srv BriefingServiceServer) {
	// If the following call pancis, it indicates UnimplementedBriefingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BriefingService_ServiceDesc, srv)
}

func _BriefingService_CreateBriefing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBriefingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BriefingServiceServer).CreateBriefing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BriefingService_CreateBriefing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BriefingServiceServer).CreateBriefing(ctx, req.(*CreateBriefingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BriefingService_GetBriefing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBriefingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BriefingServiceServer).GetBriefing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BriefingService_GetBriefing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BriefingServiceServer).GetBriefing(ctx, req.(*GetBriefingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BriefingService_ListBriefings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBriefingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BriefingServiceServer).ListBriefings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BriefingService_ListBriefings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BriefingServiceServer).ListBriefings(ctx, req.(*ListBriefingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BriefingService_UpdateBriefing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBriefingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BriefingServiceServer).UpdateBriefing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BriefingService_UpdateBriefing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BriefingServiceServer).UpdateBriefing(ctx, req.(*UpdateBriefingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BriefingService_DeleteBriefing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBriefingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BriefingServiceServer).DeleteBriefing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BriefingService_DeleteBriefing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BriefingServiceServer).DeleteBriefing(ctx, req.(*DeleteBriefingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BriefingService_CreateBriefingType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBriefingTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BriefingServiceServer).CreateBriefingType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BriefingService_CreateBriefingType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BriefingServiceServer).CreateBriefingType(ctx, req.(*CreateBriefingTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BriefingService_GetBriefingType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBriefingTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BriefingServiceServer).GetBriefingType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BriefingService_GetBriefingType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BriefingServiceServer).GetBriefingType(ctx, req.(*GetBriefingTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BriefingService_ListBriefingTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBriefingTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BriefingServiceServer).ListBriefingTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BriefingService_ListBriefingTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BriefingServiceServer).ListBriefingTypes(ctx, req.(*ListBriefingTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BriefingService_UpdateBriefingType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBriefingTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BriefingServiceServer).UpdateBriefingType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BriefingService_UpdateBriefingType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BriefingServiceServer).UpdateBriefingType(ctx, req.(*UpdateBriefingTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BriefingService_DeleteBriefingType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBriefingTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BriefingServiceServer).DeleteBriefingType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BriefingService_DeleteBriefingType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BriefingServiceServer).DeleteBriefingType(ctx, req.(*DeleteBriefingTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BriefingService_ServiceDesc is the grpc.ServiceDesc for BriefingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BriefingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ourspace_backend.v1.BriefingService",
	HandlerType: (*BriefingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBriefing",
			Handler:    _BriefingService_CreateBriefing_Handler,
		},
		{
			MethodName: "GetBriefing",
			Handler:    _BriefingService_GetBriefing_Handler,
		},
		{
			MethodName: "ListBriefings",
			Handler:    _BriefingService_ListBriefings_Handler,
		},
		{
			MethodName: "UpdateBriefing",
			Handler:    _BriefingService_UpdateBriefing_Handler,
		},
		{
			MethodName: "DeleteBriefing",
			Handler:    _BriefingService_DeleteBriefing_Handler,
		},
		{
			MethodName: "CreateBriefingType",
			Handler:    _BriefingService_CreateBriefingType_Handler,
		},
		{
			MethodName: "GetBriefingType",
			Handler:    _BriefingService_GetBriefingType_Handler,
		},
		{
			MethodName: "ListBriefingTypes",
			Handler:    _BriefingService_ListBriefingTypes_Handler,
		},
		{
			MethodName: "UpdateBriefingType",
			Handler:    _BriefingService_UpdateBriefingType_Handler,
		},
		{
			MethodName: "DeleteBriefingType",
			Handler:    _BriefingService_DeleteBriefingType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

const (
	PresenceService_ListPresences_FullMethodName  = "/ourspace_backend.v1.PresenceService/ListPresences"
	PresenceService_Checkin_FullMethodName        = "/ourspace_backend.v1.PresenceService/Checkin"
	PresenceService_Checkout_FullMethodName       = "/ourspace_backend.v1.PresenceService/Checkout"
	PresenceService_UpdatePresence_FullMethodName = "/ourspace_backend.v1.PresenceService/UpdatePresence"
	PresenceService_DeletePresence_FullMethodName = "/ourspace_backend.v1.PresenceService/DeletePresence"
)

// PresenceServiceClient is the client API for PresenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PresenceServiceClient interface {
	ListPresences(ctx context.Context, in *ListPrecensesRequest, opts ...grpc.CallOption) (*ListPrecensesResponse, error)
	Checkin(ctx context.Context, in *CheckinRequest, opts ...grpc.CallOption) (*Presence, error)
	Checkout(ctx context.Context, in *CheckoutRequest, opts ...grpc.CallOption) (*Presence, error)
	UpdatePresence(ctx context.Context, in *UpdatePresenceRequest, opts ...grpc.CallOption) (*Presence, error)
	DeletePresence(ctx context.Context, in *DeletePresenceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type presenceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPresenceServiceClient(cc grpc.ClientConnInterface) PresenceServiceClient {
	return &presenceServiceClient{cc}
}

func (c *presenceServiceClient) ListPresences(ctx context.Context, in *ListPrecensesRequest, opts ...grpc.CallOption) (*ListPrecensesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPrecensesResponse)
	err := c.cc.Invoke(ctx, PresenceService_ListPresences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presenceServiceClient) Checkin(ctx context.Context, in *CheckinRequest, opts ...grpc.CallOption) (*Presence, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Presence)
	err := c.cc.Invoke(ctx, PresenceService_Checkin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presenceServiceClient) Checkout(ctx context.Context, in *CheckoutRequest, opts ...grpc.CallOption) (*Presence, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Presence)
	err := c.cc.Invoke(ctx, PresenceService_Checkout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presenceServiceClient) UpdatePresence(ctx context.Context, in *UpdatePresenceRequest, opts ...grpc.CallOption) (*Presence, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Presence)
	err := c.cc.Invoke(ctx, PresenceService_UpdatePresence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presenceServiceClient) DeletePresence(ctx context.Context, in *DeletePresenceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PresenceService_DeletePresence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PresenceServiceServer is the server API for PresenceService service.
// All implementations must embed UnimplementedPresenceServiceServer
// for forward compatibility.
type PresenceServiceServer interface {
	ListPresences(context.Context, *ListPrecensesRequest) (*ListPrecensesResponse, error)
	Checkin(context.Context, *CheckinRequest) (*Presence, error)
	Checkout(context.Context, *CheckoutRequest) (*Presence, error)
	UpdatePresence(context.Context, *UpdatePresenceRequest) (*Presence, error)
	DeletePresence(context.Context, *DeletePresenceRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedPresenceServiceServer()
}

// UnimplementedPresenceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPresenceServiceServer struct{}

func (UnimplementedPresenceServiceServer) ListPresences(context.Context, *ListPrecensesRequest) (*ListPrecensesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPresences not implemented")
}
func (UnimplementedPresenceServiceServer) Checkin(context.Context, *CheckinRequest) (*Presence, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Checkin not implemented")
}
func (UnimplementedPresenceServiceServer) Checkout(context.Context, *CheckoutRequest) (*Presence, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Checkout not implemented")
}
func (UnimplementedPresenceServiceServer) UpdatePresence(context.Context, *UpdatePresenceRequest) (*Presence, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePresence not implemented")
}
func (UnimplementedPresenceServiceServer) DeletePresence(context.Context, *DeletePresenceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePresence not implemented")
}
func (UnimplementedPresenceServiceServer) mustEmbedUnimplementedPresenceServiceServer() {}
func (UnimplementedPresenceServiceServer) testEmbeddedByValue()                         {}

// UnsafePresenceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PresenceServiceServer will
// result in compilation errors.
type UnsafePresenceServiceServer interface {
	mustEmbedUnimplementedPresenceServiceServer()
}

func RegisterPresenceServiceServer(s grpc.ServiceRegistrar, srv PresenceServiceServer) {
	// If the following call pancis, it indicates UnimplementedPresenceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PresenceService_ServiceDesc, srv)
}

func _PresenceService_ListPresences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPrecensesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresenceServiceServer).ListPresences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PresenceService_ListPresences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresenceServiceServer).ListPresences(ctx, req.(*ListPrecensesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PresenceService_Checkin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresenceServiceServer).Checkin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PresenceService_Checkin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresenceServiceServer).Checkin(ctx, req.(*CheckinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PresenceService_Checkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresenceServiceServer).Checkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PresenceService_Checkout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresenceServiceServer).Checkout(ctx, req.(*CheckoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PresenceService_UpdatePresence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePresenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresenceServiceServer).UpdatePresence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PresenceService_UpdatePresence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresenceServiceServer).UpdatePresence(ctx, req.(*UpdatePresenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PresenceService_DeletePresence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePresenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresenceServiceServer).DeletePresence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PresenceService_DeletePresence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresenceServiceServer).DeletePresence(ctx, req.(*DeletePresenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PresenceService_ServiceDesc is the grpc.ServiceDesc for PresenceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PresenceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ourspace_backend.v1.PresenceService",
	HandlerType: (*PresenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPresences",
			Handler:    _PresenceService_ListPresences_Handler,
		},
		{
			MethodName: "Checkin",
			Handler:    _PresenceService_Checkin_Handler,
		},
		{
			MethodName: "Checkout",
			Handler:    _PresenceService_Checkout_Handler,
		},
		{
			MethodName: "UpdatePresence",
			Handler:    _PresenceService_UpdatePresence_Handler,
		},
		{
			MethodName: "DeletePresence",
			Handler:    _PresenceService_DeletePresence_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
