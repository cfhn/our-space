// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: ourspace-firmware/proto/api.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FirmwareService_ScanCard_FullMethodName            = "/ourspace_firmware.v1.FirmwareService/ScanCard"
	FirmwareService_ListenForCardEvents_FullMethodName = "/ourspace_firmware.v1.FirmwareService/ListenForCardEvents"
)

// FirmwareServiceClient is the client API for FirmwareService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FirmwareServiceClient interface {
	ScanCard(ctx context.Context, in *ScanCardRequest, opts ...grpc.CallOption) (*ScanCardResponse, error)
	ListenForCardEvents(ctx context.Context, in *ListenForCardEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListenForCardEventsResponse], error)
}

type firmwareServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFirmwareServiceClient(cc grpc.ClientConnInterface) FirmwareServiceClient {
	return &firmwareServiceClient{cc}
}

func (c *firmwareServiceClient) ScanCard(ctx context.Context, in *ScanCardRequest, opts ...grpc.CallOption) (*ScanCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScanCardResponse)
	err := c.cc.Invoke(ctx, FirmwareService_ScanCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firmwareServiceClient) ListenForCardEvents(ctx context.Context, in *ListenForCardEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListenForCardEventsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FirmwareService_ServiceDesc.Streams[0], FirmwareService_ListenForCardEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListenForCardEventsRequest, ListenForCardEventsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FirmwareService_ListenForCardEventsClient = grpc.ServerStreamingClient[ListenForCardEventsResponse]

// FirmwareServiceServer is the server API for FirmwareService service.
// All implementations must embed UnimplementedFirmwareServiceServer
// for forward compatibility.
type FirmwareServiceServer interface {
	ScanCard(context.Context, *ScanCardRequest) (*ScanCardResponse, error)
	ListenForCardEvents(*ListenForCardEventsRequest, grpc.ServerStreamingServer[ListenForCardEventsResponse]) error
	mustEmbedUnimplementedFirmwareServiceServer()
}

// UnimplementedFirmwareServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFirmwareServiceServer struct{}

func (UnimplementedFirmwareServiceServer) ScanCard(context.Context, *ScanCardRequest) (*ScanCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanCard not implemented")
}
func (UnimplementedFirmwareServiceServer) ListenForCardEvents(*ListenForCardEventsRequest, grpc.ServerStreamingServer[ListenForCardEventsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListenForCardEvents not implemented")
}
func (UnimplementedFirmwareServiceServer) mustEmbedUnimplementedFirmwareServiceServer() {}
func (UnimplementedFirmwareServiceServer) testEmbeddedByValue()                         {}

// UnsafeFirmwareServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FirmwareServiceServer will
// result in compilation errors.
type UnsafeFirmwareServiceServer interface {
	mustEmbedUnimplementedFirmwareServiceServer()
}

func RegisterFirmwareServiceServer(s grpc.ServiceRegistrar, srv FirmwareServiceServer) {
	// If the following call pancis, it indicates UnimplementedFirmwareServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FirmwareService_ServiceDesc, srv)
}

func _FirmwareService_ScanCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirmwareServiceServer).ScanCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FirmwareService_ScanCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirmwareServiceServer).ScanCard(ctx, req.(*ScanCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirmwareService_ListenForCardEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenForCardEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FirmwareServiceServer).ListenForCardEvents(m, &grpc.GenericServerStream[ListenForCardEventsRequest, ListenForCardEventsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FirmwareService_ListenForCardEventsServer = grpc.ServerStreamingServer[ListenForCardEventsResponse]

// FirmwareService_ServiceDesc is the grpc.ServiceDesc for FirmwareService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FirmwareService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ourspace_firmware.v1.FirmwareService",
	HandlerType: (*FirmwareServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScanCard",
			Handler:    _FirmwareService_ScanCard_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenForCardEvents",
			Handler:       _FirmwareService_ListenForCardEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ourspace-firmware/proto/api.proto",
}
