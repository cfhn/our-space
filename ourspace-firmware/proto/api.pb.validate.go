// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ourspace-firmware/proto/api.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ScanCardRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ScanCardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScanCardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScanCardRequestMultiError, or nil if none found.
func (m *ScanCardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ScanCardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RfidValue

	if len(errors) > 0 {
		return ScanCardRequestMultiError(errors)
	}

	return nil
}

// ScanCardRequestMultiError is an error wrapping multiple validation errors
// returned by ScanCardRequest.ValidateAll() if the designated constraints
// aren't met.
type ScanCardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScanCardRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScanCardRequestMultiError) AllErrors() []error { return m }

// ScanCardRequestValidationError is the validation error returned by
// ScanCardRequest.Validate if the designated constraints aren't met.
type ScanCardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScanCardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScanCardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScanCardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScanCardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScanCardRequestValidationError) ErrorName() string { return "ScanCardRequestValidationError" }

// Error satisfies the builtin error interface
func (e ScanCardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScanCardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScanCardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScanCardRequestValidationError{}

// Validate checks the field values on ScanCardResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ScanCardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScanCardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScanCardResponseMultiError, or nil if none found.
func (m *ScanCardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ScanCardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ScanCardResponseMultiError(errors)
	}

	return nil
}

// ScanCardResponseMultiError is an error wrapping multiple validation errors
// returned by ScanCardResponse.ValidateAll() if the designated constraints
// aren't met.
type ScanCardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScanCardResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScanCardResponseMultiError) AllErrors() []error { return m }

// ScanCardResponseValidationError is the validation error returned by
// ScanCardResponse.Validate if the designated constraints aren't met.
type ScanCardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScanCardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScanCardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScanCardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScanCardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScanCardResponseValidationError) ErrorName() string { return "ScanCardResponseValidationError" }

// Error satisfies the builtin error interface
func (e ScanCardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScanCardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScanCardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScanCardResponseValidationError{}

// Validate checks the field values on ListenForCardEventsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListenForCardEventsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListenForCardEventsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListenForCardEventsRequestMultiError, or nil if none found.
func (m *ListenForCardEventsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListenForCardEventsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListenForCardEventsRequestMultiError(errors)
	}

	return nil
}

// ListenForCardEventsRequestMultiError is an error wrapping multiple
// validation errors returned by ListenForCardEventsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListenForCardEventsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListenForCardEventsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListenForCardEventsRequestMultiError) AllErrors() []error { return m }

// ListenForCardEventsRequestValidationError is the validation error returned
// by ListenForCardEventsRequest.Validate if the designated constraints aren't met.
type ListenForCardEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListenForCardEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListenForCardEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListenForCardEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListenForCardEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListenForCardEventsRequestValidationError) ErrorName() string {
	return "ListenForCardEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListenForCardEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListenForCardEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListenForCardEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListenForCardEventsRequestValidationError{}

// Validate checks the field values on ListenForCardEventsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListenForCardEventsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListenForCardEventsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListenForCardEventsResponseMultiError, or nil if none found.
func (m *ListenForCardEventsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListenForCardEventsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if all {
		switch v := interface{}(m.GetCard()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListenForCardEventsResponseValidationError{
					field:  "Card",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListenForCardEventsResponseValidationError{
					field:  "Card",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListenForCardEventsResponseValidationError{
				field:  "Card",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMember()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListenForCardEventsResponseValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListenForCardEventsResponseValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMember()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListenForCardEventsResponseValidationError{
				field:  "Member",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListenForCardEventsResponseMultiError(errors)
	}

	return nil
}

// ListenForCardEventsResponseMultiError is an error wrapping multiple
// validation errors returned by ListenForCardEventsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListenForCardEventsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListenForCardEventsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListenForCardEventsResponseMultiError) AllErrors() []error { return m }

// ListenForCardEventsResponseValidationError is the validation error returned
// by ListenForCardEventsResponse.Validate if the designated constraints
// aren't met.
type ListenForCardEventsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListenForCardEventsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListenForCardEventsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListenForCardEventsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListenForCardEventsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListenForCardEventsResponseValidationError) ErrorName() string {
	return "ListenForCardEventsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListenForCardEventsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListenForCardEventsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListenForCardEventsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListenForCardEventsResponseValidationError{}

// Validate checks the field values on Member with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Member) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Member with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MemberMultiError, or nil if none found.
func (m *Member) ValidateAll() error {
	return m.validate(true)
}

func (m *Member) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return MemberMultiError(errors)
	}

	return nil
}

// MemberMultiError is an error wrapping multiple validation errors returned by
// Member.ValidateAll() if the designated constraints aren't met.
type MemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberMultiError) AllErrors() []error { return m }

// MemberValidationError is the validation error returned by Member.Validate if
// the designated constraints aren't met.
type MemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberValidationError) ErrorName() string { return "MemberValidationError" }

// Error satisfies the builtin error interface
func (e MemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberValidationError{}

// Validate checks the field values on Card with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Card) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Card with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CardMultiError, or nil if none found.
func (m *Card) ValidateAll() error {
	return m.validate(true)
}

func (m *Card) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetValidFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CardValidationError{
					field:  "ValidFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CardValidationError{
					field:  "ValidFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValidFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CardValidationError{
				field:  "ValidFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetValidTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CardValidationError{
					field:  "ValidTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CardValidationError{
					field:  "ValidTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValidTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CardValidationError{
				field:  "ValidTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CardMultiError(errors)
	}

	return nil
}

// CardMultiError is an error wrapping multiple validation errors returned by
// Card.ValidateAll() if the designated constraints aren't met.
type CardMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CardMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CardMultiError) AllErrors() []error { return m }

// CardValidationError is the validation error returned by Card.Validate if the
// designated constraints aren't met.
type CardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CardValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CardValidationError) ErrorName() string { return "CardValidationError" }

// Error satisfies the builtin error interface
func (e CardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCard.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CardValidationError{}
